<?php

namespace yii\easyii\modules\product\controllers;

use Yii;
use yii\data\ActiveDataProvider;
use yii\easyii\components\Controller;
use yii\easyii\helpers\Image;
use yii\easyii\behaviors\SortableController;
use yii\easyii\behaviors\StatusController;
use yii\easyii\modules\carousel\models\CarouselUploads;
use yii\easyii\modules\product\models\Product;
use yii\easyii\modules\product\models\ProductFiles;
use yii\easyii\modules\productcategory\models\ProductCategory;
use yii\easyii\modules\video\models\Video;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;
use yii\web\Response;
use yii\web\UploadedFile;
use yii\widgets\ActiveForm;

class AController extends Controller
{

    public function behaviors()
    {
        return [
            [
                'class' => SortableController::className(),
                'model' => Product::className()
            ],
            [
                'class' => StatusController::className(),
                'model' => Product::className()
            ]
        ];
    }

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }


    public function actionIndex()
    {
        $data = new ActiveDataProvider([
            'query' => Product::find()
                ->leftJoin('easyii_product_category_lang', 'easyii_product.category_id = easyii_product_category_lang.category_id')
                ->orderBy('order_num DESC'),
            'pagination' => [
                'pageSize' => 30,
            ],
        ]);

        return $this->render('index', [
            'data' => $data,
        ]);
    }

    /**
     * @return array|string|Response
     * @throws \yii\web\HttpException
     */
    public function actionCreate()
    {
        $model = new Product();
        $db = yii::$app->db;
        $post = yii::$app->request->post();
        $model->downloads = $_FILES['downloads'];

        if ($model->load($post) && $model->validate()) {

            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                return ActiveForm::validate($model);
            } else {
                $model->created_at = time();
                $model->status = Product::STATUS_ON;

                /**Download Multiple PDF files**/
                if ($_FILES['downloads']['name'] && !empty($_FILES['downloads']['name'])) {

                    $fileNames = $_FILES['downloads']['name'];
                    $fileNamesArr = [];

                    foreach ($fileNames as $key => $fileName) {

                        if ($model->validate(['downloads'])) {

                            $tmp_name = $_FILES['downloads']['tmp_name'][$key];
                            $position = strpos($fileName, ".");
                            $fileextension = substr($fileName, $position + 1);
                            $fileextension = strtolower($fileextension);

                            if (isset($fileName)) {

                                $path = 'uploads/product-files/';
                                if (empty($fileName)) {
                                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));

                                } else if (!empty($fileName)) {

                                    if (($fileextension !== "pdf") && ($fileextension !== "png") && ($fileextension !== "jpg") && ($fileextension !== "jpeg")) {
                                        $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                                    } else {
                                        if (move_uploaded_file($tmp_name, $path . time() . $fileName)) {

                                            $fileNamesArr[$key] = yii::getAlias('@web') . $path . time() . $fileName;
                                        }
                                    }
                                }
                            }
                        } else {
                            $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                        }

                    }

                }

                /*Load hover image*/
                if (isset($_FILES['Product']['name']['hover_image']) && !empty(($_FILES['Product']['name']['hover_image']))) {
                    $model->hover_image = UploadedFile::getInstance($model, 'hover_image');
                    $model->hover_image = Image::upload($model->hover_image, 'product-files', 1075, 653, true);
                }
                /* /Load hover image*/

                /** /Download Multiple PDF files**/

                $pdfArr = [];

                foreach ($post['pdf_title'] as $key => $val) {
                    $pdfArr[$key]['pdf'] = $fileNamesArr[$key];
                    $pdfArr[$key]['title'] = $val;
                }

                $model->downloads = serialize($pdfArr);

                if ($model->save(false)) {
                    if (isset($_FILES)) {
                        $modelUploads = new ProductFiles();

                        foreach ($_FILES['Product']['name']['image'] as $key => $val) {
                            $modelUploadsId = $model->id;
                            $fileInstanse = UploadedFile::getInstance($model, 'image[' . $key . ']');
                            $modelUploads->file = $fileInstanse;

                            $fileType = $_FILES['Product']['type']['image'][$key];

                            $fileType = explode('/', $fileType);

                            if ($fileType[0] != 'image') {
                                $modelUploads->type = $modelUploads::VIDEO_TYPE;

                                /**Uploaded Video File**/

                                $name = $_FILES['Product']['name']['image'][$key];
                                $tmp_name = $_FILES['Product']['tmp_name']['image'][$key];
                                $position = strpos($name, ".");
                                $fileextension = substr($name, $position + 1);
                                $fileextension = strtolower($fileextension);

                                if (isset($name)) {

                                    $path = 'uploads/product-files/';
                                    if (empty($name)) {
                                        $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));

                                    } else if (!empty($name)) {
                                        if (($fileextension !== "mp4") && ($fileextension !== "ogg") && ($fileextension !== "webm")) {
                                            $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                                        } else if (($fileextension == "mp4") || ($fileextension == "ogg") || ($fileextension == "webm")) {
                                            if (move_uploaded_file($tmp_name, $path . time() . $name)) {

                                                if ($modelUploads->validate(['file'])) {

                                                    if ($modelUploads->file) {

                                                        $modelUploads->product_id = $modelUploadsId;
                                                        $modelUploads->file = yii::getAlias('@web') . $path . time() . $name;

                                                        $db->createCommand()
                                                            ->batchInsert('easyii_product_files', ['file', 'product_id', 'type'], [[$modelUploads->file, $model->id, $modelUploads->type],])
                                                            ->execute();
                                                    }

                                                } else {
                                                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                                                }
                                            }
                                        }
                                    }
                                }

                                /** /Uploaded Video File**/

                            } else {
                                $modelUploads->type = $modelUploads::IMAGE_TYPE;

                                if ($modelUploads->validate(['file'])) {

                                    if ($modelUploads->file) {
                                        $modelUploads->thumb = Image::upload($modelUploads->file, 'product-files/thumb', 193, 144, true);
                                        $modelUploads->file = Image::upload($modelUploads->file, 'product-files', 1075, 653, true);

                                        $modelUploads->product_id = $modelUploadsId;

                                        $db->createCommand()
                                            ->batchInsert('easyii_product_files', ['file', 'thumb', 'product_id', 'type'], [[$modelUploads->file, $modelUploads->thumb, $model->id, $modelUploads->type],])
                                            ->execute();
                                    }

                                } else {
                                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                                }
                            }
                        }

                        return $this->redirect('index');

                    }

                    $this->flash('success', Yii::t('easyii', 'PageBlockChild created'));
                    return $this->redirect(['index']);
                } else {
                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                    return $this->refresh();
                }
            }

        } else {

            $parentCategories = ProductCategory::getParentCategory();
            $parentCategories = ArrayHelper::map($parentCategories, 'id', 'title');

            return $this->render('create', [
                'model' => $model,
                'parentCategories' => $parentCategories,
            ]);
        }

    }

    public function actionEdit($id)
    {
        $model = Product::find()->multilingual()->where(['id' => $id])->one();

        $oldImage = $model->image;
        $db = yii::$app->db;
        $post = yii::$app->request->post();

        if ($model === null) {
            $this->flash('error', Yii::t('easyii', 'Not found'));
            return $this->redirect(['/admin/' . $this->module->id]);
        }

        $modelOldDownloads = unserialize($model->downloads);
        $modelOldHoverImage = $model->hover_image;


        /*Update Downloads*/

        $oldArr = unserialize($model->downloads);
        $postArr = [];
        $postPdfTitle = $post['pdf_title'];
        $postPdfFile = $_FILES['downloads']['name'];

        if($postPdfFile) {
            foreach ($postPdfTitle as $key => $val) {
                $postArr[$key]['title'] = $val;
                $postArr[$key]['pdf'] = $postPdfFile[$key];
            }
        }

        $updatedDownloads = Product::updateDownloads($oldArr, $postArr);
        /* /Update Downloads*/

        if ($model->load($post) && $model->validate()) {

            if (Yii::$app->request->isAjax) {
                yii::$app->response->format = Response::FORMAT_JSON;
                return ActiveForm::validate($model);
            } else {

                $fileNamesArr = [];
                /**Download Multiple PDF files**/

                $fileNames = $_FILES['downloads']['name'];
                foreach ($fileNames as $key => $fileName) {

                    if ($_FILES['downloads']['name'][$key] && !empty($_FILES['downloads']['name'][$key])) {
                        if ($model->validate(['downloads'])) {

                            $tmp_name = $_FILES['downloads']['tmp_name'][$key];
                            $position = strpos($fileName, ".");
                            $fileextension = substr($fileName, $position + 1);
                            $fileextension = strtolower($fileextension);

                            if (isset($fileName)) {
                                $path = 'uploads/product-files/';
                                if (empty($fileName)) {
                                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));

                                } else if (!empty($fileName)) {

                                    if (($fileextension !== "pdf") && ($fileextension !== "png") && ($fileextension !== "jpg") && ($fileextension !== "jpeg")) {
                                        $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                                    } else {
                                        if (move_uploaded_file($tmp_name, $path . time() . $fileName)) {

                                            $fileNamesArr[$key] = $path . time() . $fileName;

                                        }
                                    }
                                }
                            }
                        } else {
                            $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                        }

                    }

                }


                foreach ($fileNamesArr as $k => $v) {
                    $updatedDownloads[$k]['pdf'] = $v;
                }

                $model->downloads = serialize($updatedDownloads);

                /** /Download Multiple PDF files**/

                /*Load hover image*/
                if (isset($_FILES['Product']['name']['hover_image']) && !empty(($_FILES['Product']['name']['hover_image']))) {
                    $model->hover_image = UploadedFile::getInstance($model, 'hover_image');
                    $model->hover_image = Image::upload($model->hover_image, 'product-files', 1075, 653, true);
                } else {
                    $model->hover_image = $modelOldHoverImage;
                }
                /* /Load hover image*/

                /**Update files**/
                $model->updated_at = time();
                if ($model->save(false)) {

                    if (isset($_FILES['Product']['name']['image'][0]) && !empty($_FILES['Product']['name']['image'][0])) {
                        $modelUploads = new ProductFiles();

                        foreach ($_FILES['Product']['name']['image'] as $key => $val) {
                            $modelUploadsId = $model->id;
                            $fileInstanse = UploadedFile::getInstance($model, 'image[' . $key . ']');
                            $modelUploads->file = $fileInstanse;

                            $fileType = $_FILES['Product']['type']['image'][$key];

                            $fileType = explode('/', $fileType);

                            if ($fileType[0] != 'image') {
                                $modelUploads->type = $modelUploads::VIDEO_TYPE;

                                /**Uploaded Video File**/

                                $name = $_FILES['Product']['name']['image'][$key];
                                $tmp_name = $_FILES['Product']['tmp_name']['image'][$key];
                                $position = strpos($name, ".");
                                $fileextension = substr($name, $position + 1);
                                $fileextension = strtolower($fileextension);


                                if (isset($name)) {

                                    $path = 'uploads/product-files/';
                                    if (empty($name)) {
                                        echo "Please choose a file";
                                    } else if (!empty($name)) {
                                        if (($fileextension !== "mp4") && ($fileextension !== "ogg") && ($fileextension !== "webm")) {
                                            echo "The file extension must be .mp4, .ogg, or .webm in order to be uploaded";
                                        } else if (($fileextension == "mp4") || ($fileextension == "ogg") || ($fileextension == "webm")) {
                                            if (move_uploaded_file($tmp_name, $path . time() . $name)) {

                                                if ($modelUploads->validate(['file'])) {

                                                    if ($modelUploads->file) {

                                                        $modelUploads->product_id = $modelUploadsId;
                                                        $modelUploads->file = yii::getAlias('@web') . '/' . $path . time() . $name;

                                                        $db->createCommand()
                                                            ->batchInsert('easyii_product_files', ['file', 'product_id', 'type'], [[$modelUploads->file, $model->id, $modelUploads->type],])
                                                            ->execute();
                                                    }
                                                } else {
                                                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                                                }
                                            }
                                        }
                                    }
                                }
                                /** /Uploaded Video File**/

                            } else {
                                $modelUploads->type = $modelUploads::IMAGE_TYPE;

                                if ($modelUploads->validate(['file'])) {

                                    if ($modelUploads->file) {
                                        $modelUploads->thumb = Image::upload($modelUploads->file, 'product-files/thumb', 193, 144, true);
                                        $modelUploads->file = Image::upload($modelUploads->file, 'product-files', 1075, 653, true);
                                        $modelUploads->product_id = $modelUploadsId;

                                        $db->createCommand()
                                            ->batchInsert('easyii_product_files', ['file', 'product_id', 'type'], [[$modelUploads->file, $model->id, $modelUploads->type],])
                                            ->execute();
                                    }

                                } else {
                                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                                }
                            }
                        }
                        return $this->redirect('index');
                    }

                    $this->flash('success', Yii::t('easyii', 'PageBlockChild created'));
                    return $this->redirect(['index']);
                } else {
                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                    return $this->refresh();
                }
                /** /Update files**/
            }

        } else {
            $parentCategories = ProductCategory::getParentCategory();
            $parentCategories = ArrayHelper::map($parentCategories, 'id', 'title');
            $modelFiles = ProductFiles::getProductFiles($id);
            $product = Product::getProduct($id);

            $productUploads = ProductFiles::find()
                ->where([
                    'product_id' => $id,
                ])
//                ->orderBy('id ASC')
                ->orderBy('order_num ASC')
                ->asArray()
                ->all();

            $dataUploads = ArrayHelper::map($productUploads, 'id', 'file');

            $dataUploadsKeys = array_keys($dataUploads);
            $dataTypes = ArrayHelper::map($productUploads, 'id', 'is_base');

            $newDataTypes = [];
            foreach($dataTypes as $k => $v){
                $newDataTypes[$k . 'item'] = $v;
            }

            $newDataUploads = [];
            foreach($dataUploads as $k => $v){
                $newDataUploads[$k . 'item'] = $v;
            }

            return $this->render('edit', [
                'model' => $model,
                'parentCategories' => $parentCategories,
                'modelFiles' => $modelFiles,
                'product' => $product,
                'dataUploads' => $dataUploads,
                'newDataUploads' => $newDataUploads,
//                'dataTypes' => $dataTypes,
                'dataTypes' => $newDataTypes,
            ]);

        }
    }

    public function actionDeleteUploads($id)
    {
        $id = yii::$app->request->get('id');
        $model = ProductFiles::find()
            ->where(['id' => $id])
            ->one();

        if ($model->delete()) {
            return true;
        }
    }


    public function actionDeletePdfFiles()
    {
        $db = yii::$app->db;
        $tableName = Product::tableName();
        $key = yii::$app->request->post('key');
        $id = yii::$app->request->post('id');
        $Arr = [];

        $product = Product::getProduct($id);
        $oldAttributes = unserialize($product['downloads']);

        unset($oldAttributes[$key]);

        foreach ($oldAttributes as $key => $val) {
            $Arr[$key] = $val;
        }

        $newAttributes = serialize($Arr);

        $db->createCommand()
            ->update($tableName, ['downloads' => $newAttributes], 'id = ' . $id)
            ->execute();

        echo true;

    }


    public function actionDelete($id)
    {
        if (($model = Product::findOne($id))) {

            if ($model->delete()) {
                $productFiles = ProductFiles::find()
                    ->where(['product_id' => $id])
                    ->all();

                foreach ($productFiles as $key => $val) {
                    $val->delete();
                }
            }
        } else {
            $this->error = Yii::t('easyii', 'Not found');
        }
        return $this->formatResponse(Yii::t('easyii', 'Product item deleted'));
    }

    /*Sorting file*/
    public function actionFileSorted()
    {
        if(yii::$app->request->isAjax){
            $sortedObj = yii::$app->request->post('sortedObj');
            $count = count($sortedObj);

            foreach($sortedObj as $k => $v){
                $request = Yii::$app->db->createCommand()
                    ->update('easyii_product_files', ['order_num' => $v], 'id  = ' . $k);
                $request->execute();
            }
        }
    }
    /* /Sorting file*/

    /*Select Base Image*/
    public function actionSelectBaseImage()
    {
        $key = yii::$app->request->post('key');
        $product_id = yii::$app->request->post('product_id');
        if (yii::$app->request->isAjax) {
            $changeTypeRequest = yii::$app->db->createCommand()
                ->update(
                    'easyii_product_files',
                    ['is_base' => 0],
                    [
                        'product_id' => $product_id,
                        'is_base' => 1
                    ]
                )->execute();
            $request = Yii::$app->db->createCommand()
                ->update('easyii_product_files', ['is_base' => 1], 'id = ' . $key);

            if ($request->execute()) {
                echo 'Selected Base Image is Successfully !';
                die();
            }
        }
    }

    /* /Select Base Image*/

    public function actionClearHover($id)
    {
        $model = Product::findOne($id);

        if ($model === null) {
            $this->flash('error', Yii::t('easyii', 'Not found'));
        } else {
            $model->hover_image = '';
            if ($model->update(true, ['hover_image'])) {
                $this->flash('success', Yii::t('easyii', 'Hover image cleared'));
            } else {
                $this->flash('error', Yii::t('easyii', 'Update error. {0}', $model->formatErrors()));
            }
        }
        return $this->back();
    }

    public function actionUp($id)
    {
        return $this->move($id, 'up');
    }

    public function actionDown($id)
    {
        return $this->move($id, 'down');
    }

    public function actionOn($id)
    {
        return $this->changeStatus($id, Product::STATUS_ON);
    }

    public function actionOff($id)
    {
        return $this->changeStatus($id, Product::STATUS_OFF);
    }
}