<?php

namespace yii\easyii\modules\project\controllers;

use Yii;
use yii\data\ActiveDataProvider;
use yii\easyii\behaviors\SortableDateController;
use yii\easyii\modules\project\models\ProjectUploads;
use yii\easyii\modules\projectcategory\models\ProjectCategory;
use yii\helpers\ArrayHelper;
use yii\helpers\VarDumper;
use yii\widgets\ActiveForm;
use yii\web\UploadedFile;

use yii\easyii\components\Controller;
use yii\easyii\modules\project\models\Project;
use yii\easyii\helpers\Image;
use yii\easyii\behaviors\StatusController;

class AController extends Controller
{
    public function behaviors()
    {
        return [
            [
                'class' => SortableDateController::className(),
                'model' => Project::className(),
            ],
            [
                'class' => StatusController::className(),
                'model' => Project::className()
            ]
        ];
    }


    public function beforeAction($action)
    {
        if (yii::$app->controller->action->id === 'clear-logo' || yii::$app->controller->action->id === 'clear-image') {
            $this->enableCsrfValidation = false;
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $data = Project::find()
            ->select([
                'easyii_project.id',
                'easyii_project.image',
                'easyii_project.status',
                'easyii_project_lang.title as project_title',
                'easyii_project_lang.subtitle',
                'easyii_project_category_lang.title as category_title',
                'easyii_project_category_lang.description',
            ])
            ->leftJoin('easyii_project_lang', 'easyii_project.id = easyii_project_lang.project_id')
            ->leftJoin('easyii_project_category_lang', 'easyii_project.category_id = easyii_project_category_lang.category_id')
            ->where([
                'easyii_project.status' => 1,
                'easyii_project_lang.language' => yii::$app->language,
                'easyii_project_category_lang.language' => yii::$app->language,
            ])
            ->orderBy(['easyii_project.id' => SORT_DESC])
            ->asArray()
            ->all();

        return $this->render('index', [
            'data' => $data
        ]);
    }

    public function actionCreate()
    {
        $model = new Project;
        $model->created_date = time();

        if ($model->load(Yii::$app->request->post())) {
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                return ActiveForm::validate($model);
            } else {

                if (isset($_FILES) && !empty($_FILES)) {
                    $model->logo = UploadedFile::getInstance($model, 'logo');
                    if ($model->logo && $model->validate(['logo'])) {
                        $model->logo = Image::upload($model->logo, 'project');
                    } else {
                        $model->logo = '';
                    }
                }
                $uploadedFiles = UploadedFile::getInstance($model, 'image');
                if ($model->save()) {
                    $projectId = $model->id;
                    $modelUpload = new ProjectUploads();
                    $files = $_FILES['Project']['name']['image'];
                    if (isset($files) && !empty($files)) {

                        foreach ($files as $k => $file) {
                            $modelUpload->image = UploadedFile::getInstance($model, 'image[' . $k . ']');
                            if ($modelUpload->image && $model->validate(['image'])) {
                                $modelUpload->image = Image::upload($modelUpload->image, 'project', Project::IMAGE_WIDTH, Project::IMAGE_HEIGHT, true);
                            } else {
                                $modelUpload->image = '';
                            }
                            $modelUpload->project_id = $projectId;
                            yii::$app
                                ->db
                                ->createCommand()
                                ->insert('easyii_project_uploads', ['project_id' => $modelUpload->project_id, 'image' => $modelUpload->image])
                                ->execute();
                        }

                    }

                    $this->flash('success', Yii::t('easyii', 'Project created'));
                    return $this->redirect(['/admin/' . $this->module->id]);

                } else {
                    $this->flash('error', Yii::t('easyii', 'Create error. {0}', $model->formatErrors()));
                    return $this->refresh();
                }
            }
        } else {
            $category = ProjectCategory::getAllProjectCategory();

            $category = ArrayHelper::map($category, 'id', 'title');

            return $this->render('create', [
                'model' => $model,
                'category' => $category,
            ]);

        }
    }


    public function actionEdit($id)
    {
        $model = Project::find()->multilingual()->andWhere(['id' => $id])->one();

        if ($model === null) {
            $this->flash('error', Yii::t('easyii', 'Not found'));
            return $this->redirect(['/admin/' . $this->module->id]);
        }

        if ($model->load(Yii::$app->request->post())) {
            if (Yii::$app->request->isAjax) {
                Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                return ActiveForm::validate($model);
            } else {
                if (isset($_FILES)) {
                    $model->image = UploadedFile::getInstance($model, 'image');
                    if ($model->image && $model->validate(['image'])) {
                        $model->image = Image::upload($model->image, 'project', Project::IMAGE_WIDTH, Project::IMAGE_HEIGHT, true);
                    } else {
                        $model->image = $model->oldAttributes['image'];
                    }

                    $model->logo = UploadedFile::getInstance($model, 'logo');

                    if ($model->logo && $model->validate(['logo'])) {
                        $model->logo = Image::upload($model->logo, 'project');
                    } else {
                        $model->logo = $model->oldAttributes['logo'];
                    }

                };
                $model->updated_date = time();
                if ($model->save()) {
                    $projectId = $model->id;
                    $modelUpload = new ProjectUploads();
                    $files = $_FILES['Project']['name']['image'];
                    if (isset($files) && !empty($files)) {

                        foreach ($files as $k => $file) {
                            $modelUpload->image = UploadedFile::getInstance($model, 'image[' . $k . ']');
                            if ($modelUpload->image && $model->validate(['image'])) {
                                $modelUpload->image = Image::upload($modelUpload->image, 'project', Project::IMAGE_WIDTH, Project::IMAGE_HEIGHT, true);
                            } else {
                                $modelUpload->image = '';
                            }
                            $modelUpload->project_id = $projectId;
                            yii::$app
                                ->db
                                ->createCommand()
                                ->insert('easyii_project_uploads', ['project_id' => $modelUpload->project_id, 'image' => $modelUpload->image])
                                ->execute();
                        }
                    }

                    $oldImages = ProjectUploads::find()
                        ->where(['project_id' => $model->id])
                        ->asArray()
                        ->all();

                    foreach ($oldImages as $image) {
                        @unlink(yii::getAlias('@web') . $image);
                    }

                    $this->flash('success', Yii::t('easyii', 'Project updated'));
                    return $this->redirect('index');
                } else {
                    $this->flash('error', Yii::t('easyii', 'Update error. {0}', $model->formatErrors()));
                    return $this->refresh();
                }

            }
        } else {
            $category = ProjectCategory::getAllProjectCategory();
            $category = ArrayHelper::map($category, 'id', 'title');
            $uploads = ProjectUploads::find()
                ->where(['project_id' => $id])
                ->asArray()
                ->all();

            return $this->render('edit', [
                'model' => $model,
                'category' => $category,
                'uploads' => $uploads,
            ]);
        }
    }


    public function actionDeleteUploads()
    {
        if (yii::$app->request->isAjax) {
            $key = yii::$app->request->post('key');
            $modelDeleted = ProjectUploads::find()
                ->where(['id' => $key])
                ->one();

            if ($modelDeleted->delete()) {
                @unlink(yii::getAlias('@web') . $modelDeleted->image);
                echo 1;
                die();
            } else {
                echo '0';
                die();
            }
        }

    }


    /*Select Base Image*/
    public function actionSelectBaseImage()
    {
        $key = yii::$app->request->post('key');
        $project_id = yii::$app->request->post('parentId');
        if (yii::$app->request->isAjax) {
            $changeTypeRequest = yii::$app->db->createCommand()
                ->update(
                    'easyii_project_uploads',
                    ['is_base' => 0],
                    [
                        'project_id' => $project_id,
                        'is_base' => 1
                    ]
                )->execute();
            $request = Yii::$app->db->createCommand()
                ->update('easyii_project_uploads', ['is_base' => 1], 'id = ' . $key);

            if ($request->execute()) {
                echo 'Selected Base Image is Successfully !';
                die();
            }
        }
    }

    /* /Select Base Image*/


    public function actionPhotos()
    {
        if (!($model = Project::findOne($id))) {
            return $this->redirect(['/admin/' . $this->module->id]);
        }

        return $this->render('photos', [
            'model' => $model,
        ]);
    }

    public function actionClearImage($id)
    {
        $model = Project::findOne($id);

        if ($model === null) {
            $this->flash('error', Yii::t('easyii', 'Not found'));
        } else {
            $model->image = '';
            if ($model->update(true, ['image'])) {
                $this->flash('success', Yii::t('easyii', 'Logo cleared'));
            } else {
                $this->flash('error', Yii::t('easyii', 'Update error. {0}', $model->formatErrors()));
            }
        }
        return $this->back();
    }

    public function actionClearLogo($id)
    {
        $model = Project::findOne($id);

        if ($model === null) {
            $this->flash('error', Yii::t('easyii', 'Not found'));
        } else {
            $model->logo = '';
            if ($model->update(true, ['logo'])) {
                $this->flash('success', Yii::t('easyii', 'Logo cleared'));
            } else {
                $this->flash('error', Yii::t('easyii', 'Update error. {0}', $model->formatErrors()));
            }
        }
        return $this->back();
    }

    public function actionDelete($id)
    {
        if (($model = Project::findOne($id))) {
            $model->delete();
        } else {
            $this->error = Yii::t('easyii', 'Not found');
        }
        return $this->formatResponse(Yii::t('easyii', 'Project deleted'));
    }

    public function actionUp($id)
    {

        return $this->move($id, 'up');
    }

    public function actionDown($id)
    {
        return $this->move($id, 'down');
    }

    public function actionOn($id)
    {
        return $this->changeStatus($id, Project::STATUS_ON);
    }

    public function actionOff($id)
    {
        return $this->changeStatus($id, Project::STATUS_OFF);
    }
}